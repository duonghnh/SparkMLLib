#!/usr/bin/env python3

"""
GUI for diabetes prediction.
"""
import sys

from PyQt5.QtWidgets import QWidget, QLabel, QPushButton, QLineEdit, QVBoxLayout, QHBoxLayout, QApplication, QMessageBox
from PyQt5.QtGui import QDoubleValidator, QFont
from PyQt5.QtCore import Qt, QLine

import diabetes

class Diabetes(QWidget):

    def __init__(self) -> None :
        super(Diabetes, self).__init__()
        self.sub_head = QLabel("Patient's Details")
        self.sub_head.setFont(QFont("Times",24, weight=QFont.Bold))
        self.l0 = QLineEdit()
        self.l1 = QLineEdit()
        self.l2 = QLineEdit()
        self.l3 = QLineEdit()
        self.l4 = QLineEdit()
        self.l5 = QLineEdit()
        self.l6 = QLineEdit()
        self.l7 = QLineEdit()
        self.l8 = QLineEdit()
        self.t0 = QLabel("Patient's Name:")
        self.t1 = QLabel("Pregnancies:")
        self.t2 = QLabel("Glucose:")
        self.t3 = QLabel("BloodPressure:")
        self.t4 = QLabel("SkinThickness:")
        self.t5 = QLabel("Insulin:")
        self.t6 = QLabel("BMI:")
        self.t7 = QLabel("DiabetesPedigreeFunction:")
        self.t8 = QLabel("Age:")
        self.r1 = QLabel("(70-180 mg/dl)")
        self.r2 = QLabel("(80-140mm Hg)")
        self.r3 = QLabel("(10-50mm)")
        self.r4 = QLabel("(15-276mu U/ml)")
        self.r5 = QLabel("(10-50)")
        self.r6 = QLabel("(10-50mm)")
        self.r7 = QLabel("(15-276mu U/ml)")
        self.r8 = QLabel("(10-50)")
        self.h1 = QHBoxLayout()
        self.h0 = QHBoxLayout()
        self.h2 = QHBoxLayout()
        self.h3 = QHBoxLayout()
        self.h4 = QHBoxLayout()
        self.h5 = QHBoxLayout()
        self.h6 = QHBoxLayout()
        self.h7 = QHBoxLayout()
        self.h8 = QHBoxLayout()
        self.clbtn = QPushButton("CLEAR")
        self.clbtn.setFixedWidth(100)
        self.submit = QPushButton("SUBMIT")
        self.submit.setFixedWidth(100)
        self.v1_box = QVBoxLayout()
        self.v2_box = QVBoxLayout()
        self.final_hbox = QHBoxLayout()
        self.initui()

    def initui(self) -> None:
        """ The gui is created and widgets elements are set here """
        self.v1_box.addWidget(self.sub_head)
        self.v1_box.addSpacing(10)
        self.v1_box.setSpacing(5)
        self.l1.setValidator(QDoubleValidator())
        self.l2.setValidator(QDoubleValidator())
        self.l3.setValidator(QDoubleValidator())
        self.l4.setValidator(QDoubleValidator())
        self.l5.setValidator(QDoubleValidator())
        self.l6.setValidator(QDoubleValidator())
        self.l7.setValidator(QDoubleValidator())
        self.l8.setValidator(QDoubleValidator())
        self.l0.setToolTip("Enter name here")
        self.l1.setToolTip("2 hours in an oral glucose tolerance test \n 70-180 mg/dl")
        self.l2.setToolTip("80-140mm Hg")
        self.l3.setToolTip("10-50mm")
        self.l4.setToolTip("15-276mu U/ml")
        self.l5.setToolTip("weight in kg/(height in m)^2 \n 10-50")
        self.l6.setToolTip("10-50mm")
        self.l7.setToolTip("15-276mu U/ml")
        self.l8.setToolTip("weight in kg/(height in m)^2 \n 10-50")
        self.l0.setFixedSize(265, 30)
        self.l1.setFixedSize(40,30)
        self.l2.setFixedSize(40,30)
        self.l3.setFixedSize(40,30)
        self.l4.setFixedSize(40,30)
        self.l5.setFixedSize(40,30)
        self.l6.setFixedSize(40,30)
        self.l7.setFixedSize(40,30)
        self.l8.setFixedSize(40,30)
        self.h0.addWidget(self.t0)
        self.h0.addWidget(self.l0)
        self.v1_box.addLayout(self.h0)
        self.h1.addWidget(self.t1)
        self.h1.addWidget(self.l1)
        self.h1.addWidget(self.r1)        
        self.v1_box.addLayout(self.h1)
        self.h2.addWidget(self.t2)
        self.h2.addWidget(self.l2)
        self.h2.addWidget(self.r2)       
        self.v1_box.addLayout(self.h2)
        self.h3.addWidget(self.t3)
        self.h3.addWidget(self.l3)
        self.h3.addWidget(self.r3)       
        self.v1_box.addLayout(self.h3)
        self.h4.addWidget(self.t4)
        self.h4.addWidget(self.l4)
        self.h4.addWidget(self.r4)      
        self.v1_box.addLayout(self.h4)
        self.h5.addWidget(self.t5)
        self.h5.addWidget(self.l5)
        self.h5.addWidget(self.r5)      
        self.v1_box.addLayout(self.h5)
        self.h6.addWidget(self.t6)
        self.h6.addWidget(self.l6)
        self.h6.addWidget(self.r6)      
        self.v1_box.addLayout(self.h6)
        self.h7.addWidget(self.t7)
        self.h7.addWidget(self.l7)
        self.h7.addWidget(self.r7)      
        self.v1_box.addLayout(self.h7)
        self.h8.addWidget(self.t8)
        self.h8.addWidget(self.l8)
        self.h8.addWidget(self.r8)      
        self.v1_box.addLayout(self.h8)
        self.h9 = QHBoxLayout()
        self.submit.clicked.connect(lambda: self.test_input())
        self.submit.setToolTip("Click to check if patient has diabetes")
        self.clbtn.clicked.connect(lambda: self.clfn())
        self.h9.addWidget(self.submit)
        self.h9.addWidget(self.clbtn)
        self.v1_box.addLayout(self.h9)
        self.report_ui()
        self.final_hbox.addLayout(self.v1_box)
        self.final_hbox.addSpacing(40)
        self.final_hbox.addLayout(self.v2_box)
        self.setLayout(self.final_hbox)

    def report_ui(self):
        self.v2_box.setSpacing(6)
        self.report_subhead = QLabel("THÔNG TIN")
        self.report_subhead.setAlignment(Qt.AlignCenter)
        self.report_subhead.setFont(QFont("Times",24, weight=QFont.Bold))
        self.v2_box.addWidget(self.report_subhead)
        self.details = QLabel("Model này dùng thuật toán Random Forest.\n Độ chính xác khoảng 80%.\n Bộ dữ liệu đuợc sử dụng là bộ dữ liệu PIMA tổng hợp ở Ấn Độ.")
        self.details.setFont(QFont("Arial",14, weight=QFont.Bold))
        self.details.setAlignment(Qt.AlignLeft)
        self.details.setWordWrap(True)
        self.model_details = QLabel("Điền chi tiết và nhấn SUBMIT để xem chi tiết.")
        self.model_details.setWordWrap(True)
        self.v2_box.addWidget(self.details)
        self.results = QLabel(" ")
        self.results.setWordWrap(True)
        self.v2_box.addWidget(self.results)
        self.v2_box.addWidget(self.model_details)

    def clfn(self):
        """ clear all the text fields via clear button"""
        self.l0.clear()
        self.l1.clear()
        self.l2.clear()
        self.l3.clear()
        self.l3.clear()
        self.l4.clear()
        self.l5.clear()
        self.l6.clear()
        self.l7.clear()
        self.l8.clear()
        self.report_subhead.setText("THÔNG TIN")
        self.model_details.setText("Điền chi tiết và nhấn SUBMIT để xem chi tiết.")
        self.results.setText(" ")
        self.details.setText("Model này dùng thuật toán Random Forest.\n Độ chính xác khoảng 80%.\n Bộ dữ liệu đuợc sử dụng là bộ dữ liệu PIMA tổng hợp ở Ấn Độ.")
        #print(self.frameGeometry().width())
        #print(self.frameGeometry().height())

    def test_input(self) -> None:
        """ test for diabetes"""
        my_dict = {"B":float(self.l1.text()), "C":float(self.l2.text()),"D":float(self.l3.text()), "E":float(self.l4.text()), "F": float(self.l5.text()),"G":float(self.l6.text()), "H":float(self.l7.text()), "I": float(self.l8.text())}
        output = diabetes.check_input(my_dict)
        #print(self.output)
        #self.setFixedSize(850, 342)
        self.report_subhead.setText("Reports")
        self.model_details.setText("Model này dùng thuật toán Random Forest.\nĐộ chính xác khoảng 80%.\nBộ dữ liệu đuợc sử dụng là bộ dữ liệu PIMA tổng hợp ở Ấn Độ.")
        self.details.setText("Patient's name: {}\nPregnancies: {}\nGlucose: {}\nBloodPressure: {}\nSkinThickness: {}\nInsulin: {}\nBMI: {}\nDiabetesPedigreeFunction: {}\nAge: {}".format(self.l0.text(), self.l1.text(), self.l2.text(), self.l3.text(),self.l4.text(),self.l5.text(), self.l6.text(),self.l7.text(),self.l8.text()))
        #
        if output==0:
            self.results.setText("Chẩn đoán cho thấy bệnh nhân không bị tiểu đường.")
        else:
            self.results.setText("Chẩn đoán của chúng tôi cho thấy bệnh nhân mắc bệnh tiểu đường. \n Xin vui lòng kiểm tra sớm")
        self.results.setFont(QFont("Arial",14, weight=QFont.Bold))           

    def mwindow(self) -> None:
        """ window features are set here and application is loaded into display"""
        self.setFixedSize(898, 422)
        self.setWindowTitle("Chẩn Đoán Tiểu Đường")
        self.show()


if __name__=="__main__":
    app = QApplication(sys.argv)
    a_window = Diabetes()
    a_window.mwindow()
    sys.exit(app.exec_())
